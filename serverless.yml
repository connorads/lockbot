service: lockbot

plugins:
  - serverless-webpack
  - serverless-dynamodb-local
  - "@connorads/serverless-offline"
provider:
  name: aws
  runtime: nodejs12.x
  environment:
    SLACK_SIGNING_SECRET: ${env:SLACK_SIGNING_SECRET}
    SLACK_CLIENT_ID: ${env:SLACK_CLIENT_ID}
    SLACK_CLIENT_SECRET: ${env:SLACK_CLIENT_SECRET}
    STATE_SECRET: ${env:STATE_SECRET}
    RESOURCES_TABLE_NAME: ${self:custom.resourcesTableName}
    INSTALLATIONS_TABLE_NAME: ${self:custom.installationsTableName}
    ACCESS_TOKENS_TABLE_NAME: ${self:custom.accessTokensTableName}
    SERVERLESS_STAGE: ${self:custom.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - "Fn::GetAtt": [resourcesTable, Arn]
        - "Fn::GetAtt": [installationsTable, Arn]
        - "Fn::GetAtt": [accessTokensTable, Arn]

functions:
  slack-handler:
    handler: src/handlers/slack.handler
    events:
      - http:
          method: post
          path: /slack/events
      - http:
          method: get
          path: /slack/install
      - http:
          method: get
          path: /slack/oauth_redirect
  api-handler:
    handler: src/handlers/api.handler
    events:
      - http:
          method: get
          path: /api/teams/{team}/channels/{channel}/locks
      - http:
          method: post
          path: /api/teams/{team}/channels/{channel}/locks
      - http:
          method: get
          path: /api/teams/{team}/channels/{channel}/locks/{resource}

resources:
  Resources:
    resourcesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.resourcesTableName}
        AttributeDefinitions:
          - AttributeName: Resource
            AttributeType: S
          - AttributeName: Group
            AttributeType: S
        KeySchema:
          - AttributeName: Group
            KeyType: HASH
          - AttributeName: Resource
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 4
          WriteCapacityUnits: 4
    installationsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.installationsTableName}
        AttributeDefinitions:
          - AttributeName: Team
            AttributeType: S
        KeySchema:
          - AttributeName: Team
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 4
          WriteCapacityUnits: 2
    accessTokensTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.accessTokensTableName}
        AttributeDefinitions:
          - AttributeName: Scope
            AttributeType: S
        KeySchema:
          - AttributeName: Scope
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 4
          WriteCapacityUnits: 2

custom:
  stage: ${opt:stage, self:provider.stage}
  resourcesTableName: ${self:custom.stage}-lockbot-resources
  installationsTableName: ${self:custom.stage}-lockbot-installations
  accessTokensTableName: ${self:custom.stage}-lockbot-tokens
  dynamodb:
    stages:
      - dev # https://bit.ly/35WR0TT
